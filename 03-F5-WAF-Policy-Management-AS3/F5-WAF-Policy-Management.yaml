---  
- name: ASM Policy Update with Blocked URLS, IPs or Both
  hosts: lb
  connection: local
  gather_facts: false 

  tasks:
  - name: Setup provider
    set_fact:
     provider:
      server: "{{private_ip}}"
      user: "{{ansible_user}}"
      password: "{{ansible_ssh_pass}}"
      server_port: "{{F5_Admin_Port}}"
      validate_certs: "no"

#Provision BIGIP-ASM
  - name: Provision ASM
    bigip_provision:
      provider: "{{provider}}"
      module: asm

#Create Pool and Virtual Server for Use Case
  - name: Create Pool with Members
    bigip_pool:
      provider: "{{provider}}"
      state: present
      name: "{{ F5_VIP_Name }}_pool"
      lb_method: round-robin
      monitors:
        - http

  - name: Add Pool Members
    bigip_pool_member:
      provider: "{{provider}}"
      state: present
      pool: "{{ F5_VIP_Name }}_pool"
      name: "{{hostvars[item].inventory_hostname}}"
      host: "{{hostvars[item].private_ip}}"
      port: "80"
    loop: "{{ groups['web'] }}"

#Create ASM Policy
  - name: Create ASM Policy
    bigip_asm_policy_manage:
      provider: "{{provider}}"
      name: "{{ ASM_Policy_Name }}"
      active: no

#Fetch ASM_Policy to Variable
  - name: Fetching ASM Policy
    bigip_asm_policy_fetch:
      provider: "{{provider}}"
      name: "{{ ASM_Policy_Name }}"
      inline: yes
      force: yes
    register: ASM_Policy
    when: Blocked_URLs is defined or Blocked_IPs is defined

#Output Data to File due to BUG 1390
  - copy:
      content: "{{ ASM_Policy.inline_policy }}"
      dest: "{{ ASM_Policy_File }}"
    when: Blocked_URLs is defined or Blocked_IPs is defined

#Validate Existing IP Addresses
  - name: Validate Existing IP Addresses
    shell: grep "<ip_address>{{ item }}" {{ ASM_Policy_File }}
    register: Blocked_IP_Valid
    with_items: "{{ Blocked_IPs }}"
    ignore_errors: yes
    when: Blocked_IPs is defined

#Import Additional Disallowed IPs
  - name: Add Disallowed IPs
    xml:
      path: "{{ ASM_Policy_File }}"
      pretty_print: yes
      input_type: xml
      insertafter: yes
      xpath: /policy/geolocation
      add_children: "<whitelist><ip_address>{{ item.item }}</ip_address><subnet_mask>255.255.255.255</subnet_mask><policy_builder_trusted>false</policy_builder_trusted><ignore_anomalies>false</ignore_anomalies><never_log>false</never_log><block_ip>Always</block_ip><never_learn>false</never_learn><description>blocked</description><ignore_ip_reputation>false</ignore_ip_reputation></whitelist>"
    with_items: "{{ Blocked_IP_Valid.results }}"
    when: Blocked_IPs is defined and item.rc == 1

#Validate Existing URL Addresses
  - name: Validate Existing URL Addresses
    shell: grep 'name="{{ item }}"' {{ ASM_Policy_File }}
    register: Blocked_URLs_Valid
    with_items: "{{ Blocked_URLs }}"
    ignore_errors: yes
    when: Blocked_URLs is defined

#create Disallowed URLs Section if missing
  - name: Add Disallowed URLs
    xml:
      path: "{{ ASM_Policy_File }}"
      input_type: xml
      pretty_print: yes
      insertafter: yes
      xpath: /policy/urls/url[*]
      add_children: "<disallowed_urls></disallowed_urls>"
    when: "'<disallowed_urls>' not in lookup('file', ASM_Policy_File ) and Blocked_URLs is defined"

#Import Additional Disallowed URLs
  - name: Add Disallowed URLs
    xml:
      path: "{{ ASM_Policy_File }}"
      input_type: xml
      pretty_print: yes
      xpath: /policy/urls/disallowed_urls
      add_children:
        - "<url protocol=\"HTTP\" type=\"explicit\" name=\"{{ item.item }}\"/>"
        - "<url protocol=\"HTTPS\" type=\"explicit\" name=\"{{ item.item }}\"/>"
    with_items: "{{ Blocked_URLs_Valid.results }}"
    when: Blocked_URLs is defined and item.rc == 1

#Enable Illegal URL Blocking Violations
  - name: Illegal URL Blocking Violations Enablement
    xml:
      path: "{{ ASM_Policy_File }}"
      input_type: xml
      pretty_print: yes
      xpath: /policy/blocking/violation[@name="Illegal URL"]
      set_children:
        - "<alarm>true</alarm>"
        - "<block>true</block>"
        - "<learn>true</learn>"
        - "<policy_builder_tracking>enabled</policy_builder_tracking>"
    when: Blocked_URLs is defined  

#Re-Deploy ASM policy
  - name: Create an LTM policy
    bigip_policy:
      provider: "{{provider}}"
      name: "{{ ASM_Policy_Name }}"
      state: present
    when: Blocked_URLs is defined or Blocked_IPs is defined

  - name: Import ASM policy
    bigip_asm_policy_import:
      provider: "{{provider}}"
      name: "{{ ASM_Policy_Name }}"
      source: "{{ ASM_Policy_File }}"
      force: yes
    when: Blocked_URLs is defined or Blocked_IPs is defined

  - name: Replace a forward action with an ASM action
    bigip_policy_rule:
      provider: "{{provider}}"
      policy: "{{ ASM_Policy_Name }}"
      name: rule1
      actions:
      - type: enable
        asm_policy: "{{ ASM_Policy_Name }}"
    when: Blocked_URLs is defined or Blocked_IPs is defined

  - name: Deploy Draft ASM policy
    bigip_policy:
      provider: "{{provider}}"
      name: "{{ ASM_Policy_Name }}"
      state: present
      rules:
      - rule1
    when: Blocked_URLs is defined or Blocked_IPs is defined

#Assign ASM Policy to VIP
  - name: Create a HTTPS Virtual Server
    bigip_virtual_server:
      provider: "{{provider}}"
      state: present
      description: "HTTPS Virtual Server"
      name: "{{ F5_VIP_Name }}_https_vip"
      destination: "{{ private_ip }}"
      port: "8082"
      pool: "{{ F5_VIP_Name }}_pool"
      snat: Automap
      profiles:
       - http
       - oneconnect
       - name: clientssl
         context: client-side
       - websecurity
      policies:
       - "{{ ASM_Policy_Name }}"
    when: F5_VIP_Name is defined

#Apply Draft ASM policy
  - name: Activate ASM Policy
    bigip_asm_policy_manage:
      provider: "{{provider}}"
      name: "{{ ASM_Policy_Name }}"
      active: yes

#Publish ASM Policy via TMSH
  - name: Publish ASM Policy via TMSH
    bigip_command:
      commands: "publish asm policy {{ASM_Policy_Name}}"
      provider: "{{provider}}"
